"use strict";
var Settings;
(function (Settings) {
    Settings["SELENIUM_HOST"] = "host";
    Settings["SELENIUM_PORT"] = "port";
    Settings["CREDENTIALS"] = "credentials";
    Settings["PROXY"] = "proxy";
    Settings["USE_SSL"] = "use_ssl";
    Settings["KEEP_ALIVE"] = "keep_alive";
    Settings["DEFAULT_PATH"] = "default_path";
    Settings["TIMEOUT"] = "timeout";
    Settings["RETRY_ATTEMPTS"] = "retry_attempts";
    Settings["INTERNAL_SERVER_ERROR_RETRY_INTERVAL"] = "internal_server_error_retry_interval";
})(Settings || (Settings = {}));
class HttpOptions {
    #settings;
    constructor() {
        this.#settings = {};
    }
    get settings() {
        return this.#settings;
    }
    #updateSetting(key, value) {
        this.#settings[key] = value;
        return this;
    }
    setPort(port) {
        this.#updateSetting(Settings.SELENIUM_PORT, port);
    }
    setHost(value) {
        this.#updateSetting(Settings.SELENIUM_HOST, value);
    }
    useSSL(value) {
        this.#updateSetting(Settings.USE_SSL, value);
    }
    setKeepAlive(value) {
        this.#updateSetting(Settings.KEEP_ALIVE, value);
    }
    setCredentials(credentials) {
        this.#updateSetting(Settings.CREDENTIALS, credentials);
    }
    setProxy(proxy) {
        this.#updateSetting(Settings.PROXY, proxy);
    }
    setDefaultPathPrefix(path) {
        this.#updateSetting(Settings.DEFAULT_PATH, path);
    }
    setTimeout(timeout) {
        this.#updateSetting(Settings.TIMEOUT, timeout);
    }
    setRetryAttempts(retryAttempts) {
        this.#updateSetting(Settings.RETRY_ATTEMPTS, retryAttempts);
    }
    setInternalServerRetryIntervel(retryInterval) {
        this.#updateSetting(Settings.INTERNAL_SERVER_ERROR_RETRY_INTERVAL, retryInterval);
    }
}
module.exports = {
    global: new HttpOptions(),
    HttpOptions
};
