"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
const net = __importStar(require("net"));
module.exports = function (host = 'localhost') {
    return new Promise((resolve, reject) => {
        const server = net.createServer();
        server.on('listening', function () {
            const serverAddress = server.address();
            if (!serverAddress || typeof serverAddress === 'string') {
                reject(new Error('Unable to get port from server address.'));
            }
            else {
                resolve(serverAddress.port);
            }
            server.close();
        });
        server.on('error', (e) => {
            let err;
            if (e.code === 'EADDRINUSE' || e.code === 'EACCES') {
                err = new Error('Unable to find a free port');
            }
            else {
                err = e;
            }
            reject(err);
        });
        // By providing 0 we let the operative system find an arbitrary port
        server.listen(0, host);
    });
};
